from PIL import Image
import io
import numpy as np
from sklearn import linear_model
from nba_api.stats import endpoints
from matplotlib import pyplot as plt


def get_num_by_name(name, df):
    i = 0
    for player in df.PLAYER:
        if name == player:
            return i
        i+=1
    return i

# Here we access the leagueleaders module through endpoints & assign the class to "data"
data = endpoints.leagueleaders.LeagueLeaders()

# Our "data" variable now has built in functions such as creating a dataframe for our data
df = data.league_leaders.get_data_frame()

df.head()


# First we need to get per game stats.
# We divide each variable by games played (GP) to get per game average
x, y = df.AST/df.GP, df.PTS/df.GP

# we have to reshape our array from 1d to 2d.
# The proper shaped array is an input requirement for the linear model
# reshaping is usually an issue when using 1 x variable
x = np.array(x).reshape(-1,1)
y = np.array(y).reshape(-1,1)


""" Build and fit linea regression model """
# create an object that contains the linear model class
# Fit our modeling using FGA (x) and PPG (y)
model = linear_model.LinearRegression()
model.fit(x,y)

# Get our r2 value and round it to 2 decimals. How much variance is exaplained?
# Get our predicted y values for x
r2 = round(model.score(x,y), 2)
predicted_y = model.predict(x)



plt.scatter(x, y, s=15, alpha=.5)
# Scatterplot:  Specfiy size(s) and transparency(alpha) of dots
plt.plot(x, predicted_y, color = 'black')                    # line: Add line for regression line w/ predicted values
plt.title('NBA - Relationship Between FGA and PPG')          # Give it a title
plt.xlabel('AST per Game')                                   # Label x-axis
plt.ylabel('Points Per Game')                                # Label y-axis
#plt.text(10,25, f'R2={r2}')


player_number = get_num_by_name(input(), df)
plt.annotate(df.PLAYER[player_number],                       # This the name of the top scoring player. Refer to the .head() from earlier
             (x[player_number], y[player_number]),                       # This is the point we want to annotate.
             (x[player_number]-3,y[player_number]-2),                    # These are coords for the text
             arrowprops=dict(arrowstyle='-'))    # Here we use a flat line for the arrow '-'


# Finally, let's save an image called 'graph.png'.
# We'll set the dpi (dots per inch) to 300, so we have a nice looking picture.
plt.savefig("AST(PTS).png",
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="g",
            edgecolor ='w',
            orientation ='landscape')

img_buf = io.BytesIO()
plt.savefig(img_buf, format='png')

im = Image.open(img_buf)
im.show(title="My Image")

img_buf.close()
