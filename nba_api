from nba_api.stats.static import players
player_dict = players.get_players()

# Use ternary operator or write function
# # Names are case sensitive
# bron = [player for player in player_dict if player['full_name'] == 'LeBron James'][0]
# bron_id = bron['id']
# index2 = 0
# for player in player_dict:
#     print(player_dict[index2])
#     print(index2)
#     index2 = index2 + 1
#
# # find team Ids
# from nba_api.stats.static import teams
# teams = teams.get_teams()
# GSW = [x for x in teams if x['full_name'] == 'Golden State Warriors'][0]
# GSW_id = GSW['id']
# index = 0
# for team in teams:
#     print(teams[index])
#     print(index)
#     index = index + 1


# First we import the endpoint
# We will be using pandas dataframes to manipulate the data
from nba_api.stats.endpoints import playergamelog
import pandas as pd

#Call the API endpoint passing in lebron's ID & which season
gamelog_bron = playergamelog.PlayerGameLog(player_id='2544', season = '2018')

#Converts gamelog object into a pandas dataframe
#can also convert to JSON or dictionary
df_bron_games_2018 = gamelog_bron.get_data_frames()

# If you want all seasons, you must import the SeasonAll parameter
# from nba_api.stats.library.parameters import SeasonAll
#
# gamelog_bron_all = playergamelog.PlayerGameLog(player_id='2544', season = SeasonAll.all)
#
# df_bron_games_all = gamelog_bron_all.get_data_frames()
#
# print(gamelog_bron_all)
# print(df_bron_games_all)


from nba_api.stats.endpoints import leaguegamefinder

#this time we convert it to a dataframe in the same line of code
GSW_games = leaguegamefinder.LeagueGameFinder(team_id_nullable='GSW').get_data_frames()[0]
print(GSW_games)
